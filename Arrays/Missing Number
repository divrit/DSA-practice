// Better approach

class Solution {
    public int missingNumber(int[] nums) {
        HashSet<Integer> hs = new HashSet();
        for(int i = 0 ; i< nums.length ; i++){
            hs.add(nums[i]);

        }

         for(int i = 0 ; i<= nums.length ; i++){

            if(!hs.contains(i)){
                return i;
            }

        }
         return 0;
        
    }
}


// optimal approach

class Solution {
    public int missingNumber(int[] nums) {
        
        int n = nums.length;
        int sum = n * (n+1) /2;

        int mSum =0;
        for(int i =0; i< n;i++){
                mSum += nums[i];
        }
        
        return sum - mSum;
    }
}


// optimal approach 2


class Solution {
    public int missingNumber(int[] nums) {


        int n = nums.length;
        int mxor  = 0;

 int xor  = 0;
        for(int i = 0 ; i< n ; i++){

            mxor = mxor ^ nums[i];
            
        }
        for(int i = 1 ; i<= n ; i++){

            xor = xor ^ i;
            
        }

        return mxor ^ xor;
        
    }
}


