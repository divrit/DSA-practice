/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    class Tuple{
        TreeNode node;
        int row;
        int col;

        public Tuple(TreeNode node, int row, int col){
            this.node = node;
            this.row = row;
            this.col = col;
        }


    }


    public List<List<Integer>> verticalTraversal(TreeNode root) {
        

        TreeMap<Integer, TreeMap<Integer, PriorityQueue<Integer>>> map = new TreeMap();


        Queue<Tuple> queue = new LinkedList();

        queue.add(new Tuple(root,0,0));



        while(!queue.isEmpty()){

            Tuple tuple = queue.poll();
            int row = tuple.row;
            int col = tuple.col;





            map.putIfAbsent(row, new TreeMap());
            map.get(row).putIfAbsent(col, new PriorityQueue());

            map.get(row).get(col).offer(tuple.node.val);

            if(tuple.node.left!=null){
                queue.add(new Tuple(tuple.node.left, row -1, col +1));
            }
             if(tuple.node.right!=null){
                queue.add(new Tuple(tuple.node.right, row +1, col +1));
            }




        }





        List < List < Integer >> list = new ArrayList < > ();




        for (TreeMap < Integer, PriorityQueue < Integer >> ys: map.values()) {

                /// -1,0,1,0


            list.add(new ArrayList < > ());


            // -1 -> [], 0 -> []

            for (PriorityQueue < Integer > que: ys.values()) {
                while (!que.isEmpty()) {
                    list.get(list.size() - 1).add(que.poll());
                }
            }
        }
        return list;
    }




    }
