/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {

            if(root == null){
                return root;
            }   

            if(root.val == key){
                return helper(root, key);
            }
            TreeNode newRoot = root;

            while(root!=null){
            
            if(root.val > key){

            if(root.left !=null && root.left.val == key){

                    root.left = helper(root.left,key);
                    break;
            }
            else{
                root =root.left;
            }
            }else{

            if(root.right !=null && root.right.val == key){

                    root.right = helper(root.right,key);
                    break;
            }
            else{
                root =root.right;
            }

            }

            }

            return newRoot;
        }


        public TreeNode helper(TreeNode root, int key){

                if(root.left == null){
                    return root.right;
                }
                else if(root.right == null){
                    return root.left;
                }

                TreeNode rightChild = root.right;
                TreeNode rightMostleftChild = LeftChildright(root.left);
                rightMostleftChild.right = rightChild;

        return root.left;
        }


        public TreeNode LeftChildright(TreeNode root){

            while(root.right != null){
                root = root.right;


            }
               return root;
        }
     
    }
